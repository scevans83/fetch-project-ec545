// Generated by gencpp from file fetch_controller/controller_state.msg
// DO NOT EDIT!


#ifndef FETCH_CONTROLLER_MESSAGE_CONTROLLER_STATE_H
#define FETCH_CONTROLLER_MESSAGE_CONTROLLER_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetch_controller
{
template <class ContainerAllocator>
struct controller_state_
{
  typedef controller_state_<ContainerAllocator> Type;

  controller_state_()
    : x_position(0.0)
    , y_position(0.0)
    , angle(0.0)
    , test_bool(false)  {
    }
  controller_state_(const ContainerAllocator& _alloc)
    : x_position(0.0)
    , y_position(0.0)
    , angle(0.0)
    , test_bool(false)  {
  (void)_alloc;
    }



   typedef double _x_position_type;
  _x_position_type x_position;

   typedef double _y_position_type;
  _y_position_type y_position;

   typedef double _angle_type;
  _angle_type angle;

   typedef uint8_t _test_bool_type;
  _test_bool_type test_bool;





  typedef boost::shared_ptr< ::fetch_controller::controller_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_controller::controller_state_<ContainerAllocator> const> ConstPtr;

}; // struct controller_state_

typedef ::fetch_controller::controller_state_<std::allocator<void> > controller_state;

typedef boost::shared_ptr< ::fetch_controller::controller_state > controller_statePtr;
typedef boost::shared_ptr< ::fetch_controller::controller_state const> controller_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_controller::controller_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_controller::controller_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetch_controller::controller_state_<ContainerAllocator1> & lhs, const ::fetch_controller::controller_state_<ContainerAllocator2> & rhs)
{
  return lhs.x_position == rhs.x_position &&
    lhs.y_position == rhs.y_position &&
    lhs.angle == rhs.angle &&
    lhs.test_bool == rhs.test_bool;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetch_controller::controller_state_<ContainerAllocator1> & lhs, const ::fetch_controller::controller_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetch_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fetch_controller::controller_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_controller::controller_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_controller::controller_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_controller::controller_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_controller::controller_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_controller::controller_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_controller::controller_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d57738613aa2d1a1b42d20f2a0694ccd";
  }

  static const char* value(const ::fetch_controller::controller_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd57738613aa2d1a1ULL;
  static const uint64_t static_value2 = 0xb42d20f2a0694ccdULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_controller::controller_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_controller/controller_state";
  }

  static const char* value(const ::fetch_controller::controller_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_controller::controller_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#robot state measurement\n"
"float64 x_position #inches?\n"
"float64 y_position #inches?\n"
"float64 angle #degrees\n"
"\n"
"#status variables\n"
"bool test_bool #We can add more of these\n"
;
  }

  static const char* value(const ::fetch_controller::controller_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_controller::controller_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.angle);
      stream.next(m.test_bool);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_controller::controller_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_controller::controller_state_<ContainerAllocator>& v)
  {
    s << indent << "x_position: ";
    Printer<double>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<double>::stream(s, indent + "  ", v.y_position);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "test_bool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_bool);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_CONTROLLER_MESSAGE_CONTROLLER_STATE_H
